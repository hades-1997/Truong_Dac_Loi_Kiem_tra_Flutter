/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngxmomo.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NgxMomoServiceConfig } from './data';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./data/momo-cofig";
import * as i2 from "@angular/common/http";
export class NgxMomoService {
    /**
     * @param {?} config
     * @param {?} http
     */
    constructor(config, http) {
        this.http = http;
        this.eventListener = new BehaviorSubject(false);
        this.providers = config.getProviders();
        this.providers.forEach((/**
         * @param {?} provider
         * @param {?} key
         * @return {?}
         */
        (provider, key) => {
            provider.initialize(this.eventCallback.bind(this)).then((/**
             * @param {?} r
             * @return {?}
             */
            r => {
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            error => {
            }));
        }));
    }
    /**
     * @return {?}
     */
    listen() {
        return this.eventListener.asObservable();
    }
    /**
     * @private
     * @param {?} momoEvent
     * @return {?}
     */
    eventCallback(momoEvent) {
        this.notifyEvt(momoEvent);
    }
    /**
     * @param {?} tagName
     * @return {?}
     */
    getProvider(tagName) {
        return this.providers.get(tagName);
    }
    /**
     * @private
     * @param {?} evt
     * @return {?}
     */
    notifyEvt(evt) {
        this.eventListener.next(evt);
    }
}
NgxMomoService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgxMomoService.ctorParameters = () => [
    { type: NgxMomoServiceConfig },
    { type: HttpClient }
];
/** @nocollapse */ NgxMomoService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgxMomoService_Factory() { return new NgxMomoService(i0.ɵɵinject(i1.NgxMomoServiceConfig), i0.ɵɵinject(i2.HttpClient)); }, token: NgxMomoService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMomoService.prototype.providers;
    /** @type {?} */
    NgxMomoService.prototype.eventListener;
    /**
     * @type {?}
     * @private
     */
    NgxMomoService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4bW9tby5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxpbmxhay9uZ3htb21vLyIsInNvdXJjZXMiOlsibGliL25neG1vbW8uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUE0QixNQUFNLFFBQVEsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFlLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFjLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7OztBQU1uRCxNQUFNLE9BQU8sY0FBYzs7Ozs7SUFXekIsWUFBWSxNQUE0QixFQUFVLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFUM0Qsa0JBQWEsR0FBeUIsSUFBSSxlQUFlLENBQU0sS0FBSyxDQUFDLENBQUM7UUFVM0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPOzs7OztRQUFDLENBQUMsUUFBc0IsRUFBRSxHQUFXLEVBQUUsRUFBRTtZQUM3RCxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSTs7OztZQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzVELENBQUMsRUFBQztpQkFDRCxLQUFLOzs7O1lBQUMsS0FBSyxDQUFDLEVBQUU7WUFDZixDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ0osQ0FBQzs7OztJQWZPLE1BQU07UUFDVCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDN0MsQ0FBQzs7Ozs7O0lBRU8sYUFBYSxDQUFDLFNBQXdCO1FBQzVDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7Ozs7SUFXSyxXQUFXLENBQUMsT0FBZTtRQUNoQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7OztJQUVNLFNBQVMsQ0FBQyxHQUFrQjtRQUNqQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDOzs7WUE5QkgsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBUFEsb0JBQW9CO1lBQ3BCLFVBQVU7Ozs7Ozs7O0lBUWpCLG1DQUE2Qzs7SUFDN0MsdUNBQTZFOzs7OztJQVNuQyw4QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hNb21vU2VydmljZUNvbmZpZywgTW9tb0V2ZW50LCBNb21vRXZlbnRNYWluIH0gZnJvbSAnLi9kYXRhJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBNb21vUHJvdmlkZXIgfSBmcm9tICcuL2VudGl0aWVzL21vbW8tcHJvdmlkZXInO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hNb21vU2VydmljZSB7XG4gIHByaXZhdGUgcHJvdmlkZXJzOiBNYXA8c3RyaW5nLCBNb21vUHJvdmlkZXI+O1xuICBwdWJsaWMgZXZlbnRMaXN0ZW5lcjogQmVoYXZpb3JTdWJqZWN0PGFueT4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueT4oZmFsc2UpO1xuXG4gICAgcHVibGljIGxpc3RlbigpOiBPYnNlcnZhYmxlPE1vbW9FdmVudE1haW58YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50TGlzdGVuZXIuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBldmVudENhbGxiYWNrKG1vbW9FdmVudDogTW9tb0V2ZW50TWFpbik6IHZvaWQge1xuICAgICAgdGhpcy5ub3RpZnlFdnQobW9tb0V2ZW50KTtcbiAgICB9XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogTmd4TW9tb1NlcnZpY2VDb25maWcsIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xuICAgIHRoaXMucHJvdmlkZXJzID0gY29uZmlnLmdldFByb3ZpZGVycygpO1xuICAgIHRoaXMucHJvdmlkZXJzLmZvckVhY2goKHByb3ZpZGVyOiBNb21vUHJvdmlkZXIsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBwcm92aWRlci5pbml0aWFsaXplKHRoaXMuZXZlbnRDYWxsYmFjay5iaW5kKHRoaXMpKS50aGVuKHIgPT4ge1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgIH1cblxuICAgcHVibGljIGdldFByb3ZpZGVyKHRhZ05hbWU6IHN0cmluZykge1xuICAgICByZXR1cm4gdGhpcy5wcm92aWRlcnMuZ2V0KHRhZ05hbWUpO1xuICAgfVxuXG4gIHByaXZhdGUgbm90aWZ5RXZ0KGV2dDogTW9tb0V2ZW50TWFpbik6IHZvaWQge1xuICAgICB0aGlzLmV2ZW50TGlzdGVuZXIubmV4dChldnQpO1xuICAgfVxufVxuIl19