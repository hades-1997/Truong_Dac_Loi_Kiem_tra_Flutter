/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngxmomo.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Optional, SkipSelf } from '@angular/core';
import { NgxMomoServiceConfig } from './data';
import { NgxMomoService } from './ngxmomo.service';
import { MomoQrpaymentComponent } from './components/momo-qrpayment.component';
export class NgxMomoModule {
    /**
     * @param {?=} parentModule
     */
    constructor(parentModule) {
        if (parentModule) {
            NgxMomoModule.alreadCalled = true;
        }
    }
    /**
     * the forRoot function is used to initialize the momo library in the root module i.e AppModule
     * const momoConfig = new NgxMomoServiceConfig();
     *
     * import: [
     *  .............
     *  NgxMomoModule.forRoot(momoConfig),
     *  ..............
     * ]
     *
     * @param {?} config
     * @return {?}
     */
    static forRoot(config) {
        if (NgxMomoModule.alreadCalled) {
            return;
        }
        return {
            ngModule: NgxMomoModule,
            providers: [
                NgxMomoService,
                {
                    provide: NgxMomoServiceConfig,
                    useValue: config
                }
            ]
        };
    }
}
NgxMomoModule.alreadCalled = false;
NgxMomoModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MomoQrpaymentComponent,
                ],
                imports: [],
                exports: [
                    MomoQrpaymentComponent,
                ]
            },] }
];
/** @nocollapse */
NgxMomoModule.ctorParameters = () => [
    { type: NgxMomoModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMomoModule.alreadCalled;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4bW9tby5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbGlubGFrL25neG1vbW8vIiwic291cmNlcyI6WyJsaWIvbmd4bW9tby5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUM5QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFjL0UsTUFBTSxPQUFPLGFBQWE7Ozs7SUFFeEIsWUFBb0MsWUFBNEI7UUFDOUQsSUFBSSxZQUFZLEVBQUU7WUFDZCxhQUFhLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUNuQztJQUNMLENBQUM7Ozs7Ozs7Ozs7Ozs7O0lBY0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUE0QjtRQUN6QyxJQUFJLGFBQWEsQ0FBQyxZQUFZLEVBQUU7WUFDOUIsT0FBTztTQUNSO1FBQ0QsT0FBTztZQUNMLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFNBQVMsRUFBRTtnQkFDVCxjQUFjO2dCQUNkO29CQUNFLE9BQU8sRUFBRSxvQkFBb0I7b0JBQzdCLFFBQVEsRUFBRSxNQUFNO2lCQUNqQjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7O0FBakNjLDBCQUFZLEdBQUcsS0FBSyxDQUFDOztZQVhyQyxRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFO29CQUNaLHNCQUFzQjtpQkFDdkI7Z0JBQ0QsT0FBTyxFQUFFLEVBQ1I7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLHNCQUFzQjtpQkFDdkI7YUFDRjs7OztZQUdvRCxhQUFhLHVCQUFuRCxRQUFRLFlBQUksUUFBUTs7Ozs7OztJQURqQywyQkFBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgT3B0aW9uYWwsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hNb21vU2VydmljZUNvbmZpZyB9IGZyb20gJy4vZGF0YSc7XG5pbXBvcnQgeyBOZ3hNb21vU2VydmljZSB9IGZyb20gJy4vbmd4bW9tby5zZXJ2aWNlJztcbmltcG9ydCB7IE1vbW9RcnBheW1lbnRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvbW9tby1xcnBheW1lbnQuY29tcG9uZW50JztcblxuXG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIE1vbW9RcnBheW1lbnRDb21wb25lbnQsXG4gIF0sXG4gIGltcG9ydHM6IFtcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIE1vbW9RcnBheW1lbnRDb21wb25lbnQsXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTmd4TW9tb01vZHVsZSB7XG4gIHByaXZhdGUgc3RhdGljIGFscmVhZENhbGxlZCA9IGZhbHNlO1xuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwYXJlbnRNb2R1bGU/OiBOZ3hNb21vTW9kdWxlKSB7XG4gICAgaWYgKHBhcmVudE1vZHVsZSkge1xuICAgICAgICBOZ3hNb21vTW9kdWxlLmFscmVhZENhbGxlZCA9IHRydWU7XG4gICAgICB9XG4gIH1cblxuICAvKipcbiAgICogdGhlIGZvclJvb3QgZnVuY3Rpb24gaXMgdXNlZCB0byBpbml0aWFsaXplIHRoZSBtb21vIGxpYnJhcnkgaW4gdGhlIHJvb3QgbW9kdWxlIGkuZSBBcHBNb2R1bGVcbiAgICogY29uc3QgbW9tb0NvbmZpZyA9IG5ldyBOZ3hNb21vU2VydmljZUNvbmZpZygpO1xuICAgKlxuICAgKiBpbXBvcnQ6IFtcbiAgICogIC4uLi4uLi4uLi4uLi5cbiAgICogIE5neE1vbW9Nb2R1bGUuZm9yUm9vdChtb21vQ29uZmlnKSxcbiAgICogIC4uLi4uLi4uLi4uLi4uXG4gICAqIF1cbiAgICpcbiAgICovXG5cbiAgc3RhdGljIGZvclJvb3QoY29uZmlnOiBOZ3hNb21vU2VydmljZUNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIGlmIChOZ3hNb21vTW9kdWxlLmFscmVhZENhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5neE1vbW9Nb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgTmd4TW9tb1NlcnZpY2UsXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBOZ3hNb21vU2VydmljZUNvbmZpZyxcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG5cblxuIH1cbiJdfQ==