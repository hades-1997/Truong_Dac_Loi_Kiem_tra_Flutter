import { Injectable, ɵɵdefineInjectable, ɵɵinject, Component, Input, NgModule, Optional, SkipSelf } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entities/base-momo-provider.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class BaseMomoProvider {
    constructor() { }
    /**
     * @param {?} obj
     * @param {?} onload
     * @return {?}
     */
    loadScript(obj, onload) {
        if (document.getElementById(obj.name)) {
            return;
        }
        /** @type {?} */
        const momoJs = document.createElement('script');
        momoJs.async = false;
        momoJs.src = obj.url;
        momoJs.onload = onload;
        document.head.appendChild(momoJs);
    }
    /**
     * @param {?} eventDetails
     * @return {?}
     */
    notify(eventDetails) {
        this.eventCallback({
            provider: this.TYPE,
            event: {
                type: eventDetails.type,
                details: eventDetails.detail
            }
        });
    }
}
if (false) {
    /** @type {?} */
    BaseMomoProvider.prototype.eventCallback;
    /** @type {?} */
    BaseMomoProvider.prototype.TYPE;
    /**
     * @abstract
     * @param {?} eventCallback
     * @return {?}
     */
    BaseMomoProvider.prototype.initialize = function (eventCallback) { };
    /**
     * @abstract
     * @return {?}
     */
    BaseMomoProvider.prototype.getApiUser = function () { };
    /**
     * @abstract
     * @return {?}
     */
    BaseMomoProvider.prototype.getCurrency = function () { };
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entities/momo-provider.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function MomoProvider() { }
if (false) {
    /** @type {?} */
    MomoProvider.prototype.TYPE;
    /** @type {?} */
    MomoProvider.prototype.eventCallback;
    /**
     * @param {?} eventCallback
     * @return {?}
     */
    MomoProvider.prototype.initialize = function (eventCallback) { };
    /**
     * @param {?} obj
     * @param {?} onload
     * @return {?}
     */
    MomoProvider.prototype.loadScript = function (obj, onload) { };
    /**
     * @return {?}
     */
    MomoProvider.prototype.getApiUser = function () { };
    /**
     * @return {?}
     */
    MomoProvider.prototype.getCurrency = function () { };
    /**
     * @param {?} event
     * @return {?}
     */
    MomoProvider.prototype.notify = function (event) { };
}
/**
 * @record
 */
function MtnMomoConfig() { }
if (false) {
    /** @type {?} */
    MtnMomoConfig.prototype.apiUserId;
    /** @type {?|undefined} */
    MtnMomoConfig.prototype.environ;
    /** @type {?|undefined} */
    MtnMomoConfig.prototype.url;
    /** @type {?|undefined} */
    MtnMomoConfig.prototype.currency;
}
class MomoProviderClass {
    constructor() {
        this.currency = 'EUR';
        this.environ = 'sandbox';
    }
}
if (false) {
    /** @type {?} */
    MomoProviderClass.prototype.name;
    /** @type {?} */
    MomoProviderClass.prototype.url;
    /** @type {?} */
    MomoProviderClass.prototype.currency;
    /** @type {?} */
    MomoProviderClass.prototype.environ;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/providers/momo-widget-privider.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MomoWidgetProvider extends BaseMomoProvider {
    /**
     * @param {?} config
     */
    constructor(config) {
        super();
        this.TYPE = 'mtnmomowidget';
        this.momoProviderObj = new MomoProviderClass();
        this.momoConfig = config;
        this.momoProviderObj.name = 'mtnmomowidget';
        this.momoProviderObj.url = config.url || 'https://widget.northeurope.cloudapp.azure.com:9443/v0.1.0/mobile-money-widget-mtn.js';
    }
    /**
     * @param {?} eventCallback
     * @return {?}
     */
    initialize(eventCallback) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.loadScript(this.momoProviderObj, (/**
             * @return {?}
             */
            () => {
                this.eventCallback = eventCallback;
                window.addEventListener('mobile-money-qr-payment-created', (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => this.notify(e)));
                window.addEventListener('mobile-money-qr-payment-canceled', (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => this.notify(e)));
                window.addEventListener('mobile-money-qr-payment-successful', (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => this.notify(e)));
                window.addEventListener('mobile-money-qr-payment-failed', (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => this.notify(e)));
                mobileMoneyReinitializeWidgets();
                resolve();
            }));
        }));
    }
    /**
     * @return {?}
     */
    getApiUser() {
        return this.momoConfig.apiUserId;
    }
    /**
     * @return {?}
     */
    getCurrency() {
        return this.momoConfig.currency;
    }
}
MomoWidgetProvider.PROVIDER_TYPE = 'mtnmomowidget';
if (false) {
    /** @type {?} */
    MomoWidgetProvider.PROVIDER_TYPE;
    /** @type {?} */
    MomoWidgetProvider.prototype.TYPE;
    /**
     * @type {?}
     * @private
     */
    MomoWidgetProvider.prototype.momoConfig;
    /** @type {?} */
    MomoWidgetProvider.prototype.momoProviderObj;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data/momo-cofig.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function NgxMomoServiceConfigItem() { }
if (false) {
    /** @type {?} */
    NgxMomoServiceConfigItem.prototype.provider;
}
class NgxMomoServiceConfig {
    /**
     * @param {?=} providers
     */
    constructor(providers) {
        this.providers = new Map();
        if (providers) {
            // tslint:disable-next-line: prefer-for-of
            for (let i = 0; i < providers.length; i++) {
                /** @type {?} */
                const element = providers[i];
                this.providers.set(element.provider.TYPE, element.provider);
            }
        }
    }
    /**
     * @return {?}
     */
    getProviders() {
        return this.providers;
    }
    /**
     * @private
     * @param {?} provider
     * @return {?}
     */
    addProvider(provider) {
        if (!this.providers.get(provider.TYPE)) {
            this.providers.set(provider.TYPE, provider);
        }
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} config
     * @return {THIS}
     */
    addMomoWidgetProvider(config) {
        (/** @type {?} */ (this)).addProvider(new MomoWidgetProvider(config));
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMomoServiceConfig.prototype.providers;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data/momo-events.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function MomoEvent() { }
if (false) {
    /** @type {?} */
    MomoEvent.prototype.type;
    /** @type {?} */
    MomoEvent.prototype.details;
}
/**
 * @record
 */
function MomoEventMain() { }
if (false) {
    /** @type {?} */
    MomoEventMain.prototype.provider;
    /** @type {?} */
    MomoEventMain.prototype.event;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngxmomo.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxMomoService {
    /**
     * @param {?} config
     * @param {?} http
     */
    constructor(config, http) {
        this.http = http;
        this.eventListener = new BehaviorSubject(false);
        this.providers = config.getProviders();
        this.providers.forEach((/**
         * @param {?} provider
         * @param {?} key
         * @return {?}
         */
        (provider, key) => {
            provider.initialize(this.eventCallback.bind(this)).then((/**
             * @param {?} r
             * @return {?}
             */
            r => {
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            error => {
            }));
        }));
    }
    /**
     * @return {?}
     */
    listen() {
        return this.eventListener.asObservable();
    }
    /**
     * @private
     * @param {?} momoEvent
     * @return {?}
     */
    eventCallback(momoEvent) {
        this.notifyEvt(momoEvent);
    }
    /**
     * @param {?} tagName
     * @return {?}
     */
    getProvider(tagName) {
        return this.providers.get(tagName);
    }
    /**
     * @private
     * @param {?} evt
     * @return {?}
     */
    notifyEvt(evt) {
        this.eventListener.next(evt);
    }
}
NgxMomoService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgxMomoService.ctorParameters = () => [
    { type: NgxMomoServiceConfig },
    { type: HttpClient }
];
/** @nocollapse */ NgxMomoService.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgxMomoService_Factory() { return new NgxMomoService(ɵɵinject(NgxMomoServiceConfig), ɵɵinject(HttpClient)); }, token: NgxMomoService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMomoService.prototype.providers;
    /** @type {?} */
    NgxMomoService.prototype.eventListener;
    /**
     * @type {?}
     * @private
     */
    NgxMomoService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/momo-qrpayment.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MomoQrpaymentComponent {
    /**
     * @param {?} momo
     */
    constructor(momo) {
        this.momo = momo;
        this.momoProvider = this.momo.getProvider('mtnmomowidget');
        if (!this.momoProvider && !(this.momoProvider instanceof MomoWidgetProvider)) {
            throw new Error(`${MomoWidgetProvider.PROVIDER_TYPE} was not initialized`);
        }
        this.apiUserId = this.momoProvider.getApiUser();
        this.currency = this.momoProvider.getCurrency();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
MomoQrpaymentComponent.decorators = [
    { type: Component, args: [{
                selector: 'momo-qrpayment',
                template: `
        <div>
            <div
                class="mobile-money-qr-payment"
                [attr.data-api-user-id]="apiUserId"
                [attr.data-amount]="amount"
                [attr.data-currency]="currency"
                [attr.data-external-id]="externalId"
            >
            </div>
        </div>
    `
            }] }
];
/** @nocollapse */
MomoQrpaymentComponent.ctorParameters = () => [
    { type: NgxMomoService }
];
MomoQrpaymentComponent.propDecorators = {
    externalId: [{ type: Input }],
    amount: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MomoQrpaymentComponent.prototype.externalId;
    /** @type {?} */
    MomoQrpaymentComponent.prototype.amount;
    /**
     * @type {?}
     * @private
     */
    MomoQrpaymentComponent.prototype.momoProvider;
    /** @type {?} */
    MomoQrpaymentComponent.prototype.apiUserId;
    /** @type {?} */
    MomoQrpaymentComponent.prototype.currency;
    /** @type {?} */
    MomoQrpaymentComponent.prototype.momo;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngxmomo.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxMomoModule {
    /**
     * @param {?=} parentModule
     */
    constructor(parentModule) {
        if (parentModule) {
            NgxMomoModule.alreadCalled = true;
        }
    }
    /**
     * the forRoot function is used to initialize the momo library in the root module i.e AppModule
     * const momoConfig = new NgxMomoServiceConfig();
     *
     * import: [
     *  .............
     *  NgxMomoModule.forRoot(momoConfig),
     *  ..............
     * ]
     *
     * @param {?} config
     * @return {?}
     */
    static forRoot(config) {
        if (NgxMomoModule.alreadCalled) {
            return;
        }
        return {
            ngModule: NgxMomoModule,
            providers: [
                NgxMomoService,
                {
                    provide: NgxMomoServiceConfig,
                    useValue: config
                }
            ]
        };
    }
}
NgxMomoModule.alreadCalled = false;
NgxMomoModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MomoQrpaymentComponent,
                ],
                imports: [],
                exports: [
                    MomoQrpaymentComponent,
                ]
            },] }
];
/** @nocollapse */
NgxMomoModule.ctorParameters = () => [
    { type: NgxMomoModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMomoModule.alreadCalled;
}

/**
 * @fileoverview added by tsickle
 * Generated from: index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: linlak-ngxmomo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxMomoModule, NgxMomoService, NgxMomoServiceConfig, NgxMomoServiceConfig as ɵa, MomoQrpaymentComponent as ɵb };
//# sourceMappingURL=linlak-ngxmomo.js.map
