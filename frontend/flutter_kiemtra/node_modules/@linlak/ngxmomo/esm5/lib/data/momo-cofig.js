/**
 * @fileoverview added by tsickle
 * Generated from: lib/data/momo-cofig.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { MomoWidgetProvider } from '../providers/momo-widget-privider';
/**
 * @record
 */
export function NgxMomoServiceConfigItem() { }
if (false) {
    /** @type {?} */
    NgxMomoServiceConfigItem.prototype.provider;
}
var NgxMomoServiceConfig = /** @class */ (function () {
    function NgxMomoServiceConfig(providers) {
        this.providers = new Map();
        if (providers) {
            // tslint:disable-next-line: prefer-for-of
            for (var i = 0; i < providers.length; i++) {
                /** @type {?} */
                var element = providers[i];
                this.providers.set(element.provider.TYPE, element.provider);
            }
        }
    }
    /**
     * @return {?}
     */
    NgxMomoServiceConfig.prototype.getProviders = /**
     * @return {?}
     */
    function () {
        return this.providers;
    };
    /**
     * @private
     * @param {?} provider
     * @return {?}
     */
    NgxMomoServiceConfig.prototype.addProvider = /**
     * @private
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        if (!this.providers.get(provider.TYPE)) {
            this.providers.set(provider.TYPE, provider);
        }
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} config
     * @return {THIS}
     */
    NgxMomoServiceConfig.prototype.addMomoWidgetProvider = /**
     * @template THIS
     * @this {THIS}
     * @param {?} config
     * @return {THIS}
     */
    function (config) {
        (/** @type {?} */ (this)).addProvider(new MomoWidgetProvider(config));
        return (/** @type {?} */ (this));
    };
    return NgxMomoServiceConfig;
}());
export { NgxMomoServiceConfig };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMomoServiceConfig.prototype.providers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9tby1jb2ZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BsaW5sYWsvbmd4bW9tby8iLCJzb3VyY2VzIjpbImxpYi9kYXRhL21vbW8tY29maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7OztBQUl2RSw4Q0FFQzs7O0lBREcsNENBQXVCOztBQUUzQjtJQUVJLDhCQUFZLFNBQXNDO1FBRDFDLGNBQVMsR0FBOEIsSUFBSSxHQUFHLEVBQXdCLENBQUM7UUFHM0UsSUFBSSxTQUFTLEVBQUU7WUFDWCwwQ0FBMEM7WUFDMUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O29CQUNqQyxPQUFPLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQy9EO1NBQ0o7SUFDTCxDQUFDOzs7O0lBQ0QsMkNBQVk7OztJQUFaO1FBQ0ksT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7Ozs7OztJQUNPLDBDQUFXOzs7OztJQUFuQixVQUFvQixRQUFzQjtRQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDL0M7SUFDTCxDQUFDOzs7Ozs7O0lBRU0sb0RBQXFCOzs7Ozs7SUFBNUIsVUFBNkIsTUFBcUI7UUFDOUMsbUJBQUEsSUFBSSxFQUFBLENBQUMsV0FBVyxDQUFDLElBQUksa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNqRCxPQUFPLG1CQUFBLElBQUksRUFBQSxDQUFDO0lBQ2hCLENBQUM7SUFDTCwyQkFBQztBQUFELENBQUMsQUF6QkQsSUF5QkM7Ozs7Ozs7SUF4QkcseUNBQStFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9tb1Byb3ZpZGVyLCBNdG5Nb21vQ29uZmlnIH0gZnJvbSAnLi4vZW50aXRpZXMvbW9tby1wcm92aWRlcic7XG5pbXBvcnQgeyBNb21vV2lkZ2V0UHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvbW9tby13aWRnZXQtcHJpdmlkZXInO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBNb21vRXZlbnQgfSBmcm9tICcuL21vbW8tZXZlbnRzJztcblxuZXhwb3J0IGludGVyZmFjZSBOZ3hNb21vU2VydmljZUNvbmZpZ0l0ZW0ge1xuICAgIHByb3ZpZGVyOiBNb21vUHJvdmlkZXI7XG59XG5leHBvcnQgY2xhc3MgTmd4TW9tb1NlcnZpY2VDb25maWcge1xuICAgIHByaXZhdGUgcHJvdmlkZXJzOiBNYXA8c3RyaW5nLCBNb21vUHJvdmlkZXI+ID0gbmV3IE1hcDxzdHJpbmcsIE1vbW9Qcm92aWRlcj4oKTtcbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlcnM/OiBOZ3hNb21vU2VydmljZUNvbmZpZ0l0ZW1bXSkge1xuXG4gICAgICAgIGlmIChwcm92aWRlcnMpIHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogcHJlZmVyLWZvci1vZlxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm92aWRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gcHJvdmlkZXJzW2ldO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvdmlkZXJzLnNldChlbGVtZW50LnByb3ZpZGVyLlRZUEUsIGVsZW1lbnQucHJvdmlkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldFByb3ZpZGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzO1xuICAgIH1cbiAgICBwcml2YXRlIGFkZFByb3ZpZGVyKHByb3ZpZGVyOiBNb21vUHJvdmlkZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3ZpZGVycy5nZXQocHJvdmlkZXIuVFlQRSkpIHtcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXJzLnNldChwcm92aWRlci5UWVBFLCBwcm92aWRlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkTW9tb1dpZGdldFByb3ZpZGVyKGNvbmZpZzogTXRuTW9tb0NvbmZpZykge1xuICAgICAgICB0aGlzLmFkZFByb3ZpZGVyKG5ldyBNb21vV2lkZ2V0UHJvdmlkZXIoY29uZmlnKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbiJdfQ==